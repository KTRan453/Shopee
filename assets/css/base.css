:root{
    --primary-color:#ee4d2d;
    --white-color:#fff;
    --black-color:#000;
    --text-color:#333;
    --border-color:#dbdbdb;
    --star-gold-color:#ffce3e;
    --header-height:120px;
    --navbar-height:20px;
    --header-sort-bar-height:46px;
    --header-with-search-height:calc(var(--header-height) - var(--navbar-height));
}
*{ /* cả cái index--*/
    box-sizing: inherit;
}
html{ /*qui định phần có chữ*/
    font-size: 62.5%;  /*100% <=> 16px vậy nên 62.5% sẽ là 10px */
    line-height: 1.6rem;   /*1rem bằng 10. 1.6rem=16px*/
    font-family: 'Roboto', sans-serif;
    box-sizing: border-box;
}
/* .grid{
    .row{
        .column{

        }
        .column{

        }
    }

    .row{
        .column{

        }
        .column{

        }
    }
} */
/*Responsive*/


/* .grid{
    width: 1200px;
    max-width: 100%; 
    margin: 0 auto;
}

.grid__full-width{
    width:100%
} */
.grid__row{
    display: flex;
    flex-wrap: wrap;
    margin-left: -5px;
    margin-right: -5px;
}
/*Test*/
.grid__column-2{
    padding-left: 5px;
    padding-right: 5px;
    width: 16.6667%;
}
.grid__column-2-4{
    padding-left: 5px;
    padding-right: 5px;
    width: 20%;
}
.grid__column-10{
    padding-left: 5px;
    padding-right: 5px;
    width: 83.3334%;
}
/*animation*/
@keyframes fadeIn{
    from{
        opacity: 0; /*trong suốt*/
    }
    to{
        opacity: 1;
    }
}
@keyframes growth{
    from{
       transform: scale(var(--growth-from));
    }
    to{
        transform: scale(var(--growth-to));
    }
}
.modal{
    position: fixed;
    top:0;
    right: 0;
    left: 0;
    bottom: 0;
    display: flex;
    animation: fadeIn ease-in 0.1s;
}
.modal__overlay{
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0, 0.4);
}
.modal__body{
    --growth-from:0.7;
    --growth-to:1;
    /* background-color: white; */
    margin: auto;
    z-index: 1; /*thứ tự hiển thị.Mặc định là 0*/
    border-radius:5px ;
    animation: growth linear 0.1s;
}
/* Button style-css chung cho tất cả */
.btn{
    min-width: 142px;
    height: 36px;
    text-decoration: none;
    border-radius: 2px;
    border: none;
    font-size: 1.4rem;
    outline: none;
    cursor: pointer;
    color: var(--text-color);
    display: inline-flex;
    align-items: center;
    justify-content: center;
}
.btn.btn--normal:hover{
    background-color: rgba(0, 0, 0,0.1);
}
.btn.btn--size-s{
    height: 32px;
    font-size: 12px;
    padding: 0 12px;

}
.btn.btn--primary{ /*muốn CSS cho thẻ có 2 class thì phải có dấu chấm giữa 2 class-css riêng cho thẻ*/
    color: var(--white-color);
    background-color: var(--primary-color);

}
.btn.btn--disabled{
    color: #949494;
    cursor: default;
    background-color: #c3c3c3;
}
/* .arrow::before{
    content: "";
    border:20px solid #d3d3d3;
    border-color: transparent transparent var(--white-color) transparent;
    position: absolute;
    top: -28px;
    right: 0px;
} */

/*selection*/
.select-input{
    position: relative;
    height: 34px;
    min-width: 120px;
    padding: 0 12px;
    border-radius: 2px;
    background-color: var(--white-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-width: 200px;
}
.select-input__label{
    font-size: 1.4rem;
    cursor: default;

}
.select-input__icon{
    font-size: 1.4rem;
    color: rgb(131, 131, 131);
    
    position: relative;
    top: 1px;
}
.select-input__list{
    z-index: 1;
    position: absolute;
    padding: 10px 16px;
    list-style: none;
    left: 0;
    right: 0;
    top: 77%;
    border-radius: 2px;
    background-color: var(--white-color);
    display: none;
}
.select-input__list::before{
    position: absolute;
    width: 100%;
    height: 20px;
    content: "";/*hình như là thay div*/
    display: block;
    top:-15px;
    right: 0;
    /* background-color: #f53e2d; */
}
.select-input__link {
    font-size: 1.4rem;
    color: var(--text-color);
    text-decoration: none;
    display: block;
    padding: 5px 0;
}
.select-input__link:hover{
    color: var(--primary-color);
}
.select-input:hover .select-input__list{
    display: block;
}
/*Phân trang*/
.pagination{
    display: flex;
    justify-content: center;
    list-style: none;
  
}
.pagination-item{
   margin: 0 8px;
}
.pagination-item--active a{
    background-color: var(--primary-color);
    color: var(--white-color);
}
.pagination-item--active a:hover{
    background-color: cyan;
}
.pagination-item__link{
    --height:30px;
    display: block; /*thẻ a ko có display:block-có mới qui định đc width như định nghĩa*/
    text-decoration: none;
    font-size: 1.6rem;
    color: #939393;
    min-width: 40px;
    height: var(--height);
    line-height: var(--height);
    text-align: center;
    border-radius: 2px;
}
.pagination-item__icon{

}
/* --> Thêm dấu 3 chấm sau 1 câu
overflow:hidden;
display: -webkit-box;
-webkit-box-orient: vertical;
-webkit-line-clamp: 2; */

/* -->Tạo border tam giác thường
border-color: transparent rgba(255,212,36,.9);
border-style: solid;
border-width: 0 20.6px 4px; */

/* -->Tạo tam giác vuông cân
border:20px solid #d3d3d3;
border-color: transparent transparent var(--white-color) transparent; */



/* Tag <label> định nghĩa nhãn cho thành phần <input />.
Tag <label> không hiển thị bất cứ gì đặc biệt cho người dùng, tuy nhiên nó cung cấp một cải thiện cho người sử dụng chuột, nếu click chuột vào nhãn, sẽ đưa con trỏ chuột vào vùng <input />.
Muốn sử dụng hiệu quả <label>, cần thiết phải cho giá trị id của <input /> và giá trị for của <label>, hai giá trị này phải trùng nhau */


/* class nhiều thuộc tính thì css bên main sau đó thao tác trên breakpoint--hoặc tạo một css mới
Thuộc tính ko sử dụng thì display:none bên BkPoint
hoặc Hide on bên BkP rồi áp vào class bên index*/

/* Thẻ navbar chứa các liên kết chính của web-điều hướng*/

/*
-> flex-basis:Cái này bạn có thể hiểu đơn giản nhất là gán cho item một kích thước nhất định lúc ban đầu
            dùng để quy định độ dài ban đầu của một item
                hệ thống flex--set chiều width cho item(hoặc bất kì)
-> flex-shrink: sẽ quy định yếu tố co lại của item, nó sẽ quyết định một item sẽ bị co lại như thế nào so với các item còn lại
                --set độ co item khi th cha bị giới hạn--càng tăng càng ít co
-> flex-grow: Flex-grow sẽ được sử dụng khi tổng kích thước các item trong container của bạn 
                nhỏ hơn kích thước của container và bạn muốn nội dung trong container của mình 
                luôn được lấp đầy.,lúc sau
                *số nguyên(1) or(2) ....Tỉ lệ gấp đôi hoặc gấp 3 lên
*/

/*Block (khối)sẽ chiếm hết một dòng riêng cho content,các item khác sẽ xuống dòng---inline thì ngược lại,
nhiều item sẽ cũng một dòng,ko xuống dòng*/

/*Inline-block sẽ chia item theo khối nhưng lại nằm một dòng*/


/* rem phụ thuộc vào thẻ HTML(reset css)
    em phụ thuộc vào thẻ chứa nó (default:16px   */


/* gutter chỉ set cho ROW---Column sẽ chịu ảnh hưởng theo*/

/* breakpoint qui định trong 2 khoảng sẽ bổ sung thêm chiều dài .wide:width*/

/*Hover hiện ra một cái mới chỉ đc khi hover vào th chứa nó*/
/* cùng một div
    .header__cart-list--have-cart .header__cart-no-cart-img
    .header__cart-list--no-cart .header__cart-no-cart-img
-> cùng một tag(div).khi có sự thay đổi thì class dc selector tới sẽ thay đổi khác
Những div có thể thay đổi thì Nên select ntn để chặt chẽ hon  */

/* selector : lấy th dc chọn thôi A + B => set css cho B
    .class > .class :set thẻ con trực tiếp, (có thể là 1,2,3,..) những thẻ con trực tiếp cùng loại thẻ đều dc lấy.
                      Dù cùng loại thẻ nhưng lồng sâu hơn thì ko dc,bị ngăn cách bởi thẻ khác vẫn nhận dc
    .class + .class : set theo những thẻ ae cùng cấp,chỉ chọn DUY NHẤT 1 thẻ phía sau,dù cùng loại vẫn ko nhận
    .class~.class : set theo những thẻ ae cùng cấp,chọn tất cả những thẻ  cùng loại dù bị ngăn bởi thẻ khác,lồng sâu ko dc 

    */


/* 
    Đặt tên chuẩn BEM
        với Block:.block__element--child
        với block lồng sâu,từ thứ 4 đổ đi: biến thằng thứ 2 thành block luôn: .block-element__child
        với Modifier:block--modifier

*/

